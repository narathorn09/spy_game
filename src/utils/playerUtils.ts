import data from "../json/data.json";

// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
export const isReadyToStart = (players: { name: string; isSpy: boolean; role: string }[]) => {
  return players.length >= 3 && players.every(player => player.name.trim() !== "");
};

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
export const handlePlayerChange = (
  players: { name: string; isSpy: boolean; role: string }[],
  index: number,
  value: string,
  setPlayers: (players: { name: string; isSpy: boolean; role: string }[]) => void
) => {
  const updatedPlayers = [...players];
  updatedPlayers[index].name = value;
  setPlayers(updatedPlayers);
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
export const addPlayer = (
  players: { name: string; isSpy: boolean; role: string }[],
  setPlayers: (players: { name: string; isSpy: boolean; role: string }[]) => void
) => {
  setPlayers([...players, { name: "", isSpy: false, role: "" }]);
};

// ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
export const removePlayer = (
  players: { name: string; isSpy: boolean; role: string }[],
  index: number,
  setPlayers: (players: { name: string; isSpy: boolean; role: string }[]) => void
) => {
  const updatedPlayers = [...players];
  updatedPlayers.splice(index, 1);
  setPlayers(updatedPlayers);
};

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° (‡∏™‡∏∏‡πà‡∏° Spy)
export const startGame = (
  players: { name: string; isSpy: boolean; role: string }[],
  spyNum: number
) => {
  // ‡πÄ‡∏ã‡∏ü location list ‡∏•‡∏á localStorage (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  localStorage.setItem("location", JSON.stringify(data));
  const locationListString = localStorage.getItem("location");
  const locationList = locationListString ? JSON.parse(locationListString) : [];

  // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
  const randomLocationIndex = Math.floor(Math.random() * data.length);
  const selectedLocation = locationList[randomLocationIndex];

  // ‡∏™‡∏∏‡πà‡∏° Spy
  const spyIndexes: number[] = [];
  while (spyIndexes.length < spyNum) {
    const randomIndex = Math.floor(Math.random() * players.length);
    if (!spyIndexes.includes(randomIndex)) {
      spyIndexes.push(randomIndex);
    }
  }

  // ‡∏™‡∏∏‡πà‡∏° Role (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏á index)
  const nonSpyPlayers = players.filter((_, index) => !spyIndexes.includes(index));

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Role ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô non-spy ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  const availableRoles = selectedLocation.roles.slice(0, nonSpyPlayers.length);
  const shuffledRoles = availableRoles.sort(() => Math.random() - 0.5);

  const updatedPlayers = players.map((player, index) => {
    if (spyIndexes.includes(index)) {
      return {
        ...player,
        isSpy: true,
        role: "Spy"
      };
    } else {
      const randomRoleIndex = Math.floor(Math.random() * shuffledRoles.length);
      const assignedRole = shuffledRoles.splice(randomRoleIndex, 1)[0]; // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥
      return {
        ...player,
        isSpy: false,
        role: assignedRole
      };
    }
  });

  console.log("üîé ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:", updatedPlayers);
  console.log("üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:", selectedLocation);

  localStorage.setItem("players", JSON.stringify(updatedPlayers));
  localStorage.setItem("selectedLocation", JSON.stringify(selectedLocation));
};

